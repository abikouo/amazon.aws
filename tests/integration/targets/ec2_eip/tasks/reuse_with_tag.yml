---
- name: Attempt reusing using tags
  block:
    # ------------------------------------------------------------------------------------------
    # Reuse with tag - No match available
    # ------------------------------------------------------------------------------------------
    - name: Get current state of EIPs
      amazon.aws.ec2_eip_info:
      register: eip_current

    - name: attempt reusing an existing EIP with a tag (No match available) - check_mode
      amazon.aws.ec2_eip:
        state: present
        reuse_existing_ip_allowed: true
        tag_name: Team
      register: no_tagged_eip
      check_mode: true

    - ansible.builtin.assert:
        that:
          - no_tagged_eip is changed

    - name: attempt reusing an existing EIP with a tag (No match available)
      amazon.aws.ec2_eip:
        state: present
        reuse_existing_ip_allowed: true
        tag_name: Team
      register: no_tagged_eip

    - amazon.aws.ec2_eip_info:
      register: eip_info

    - ansible.builtin.assert:
        that:
          - no_tagged_eip is changed
          - no_tagged_eip.public_ip is defined and ( no_tagged_eip.public_ip | ansible.utils.ipaddr )
          - no_tagged_eip.allocation_id is defined and no_tagged_eip.allocation_id.startswith("eipalloc-")
          - ( eip_current.addresses | length ) + 1  == ( eip_info.addresses | length )

    # ------------------------------------------------------------------------------------------
    # Reuse with tag - Match available
    # ------------------------------------------------------------------------------------------
    - name: Set latest EIPs list
      ansible.builtin.set_fact:
        eip_current: "{{ eip_info }}"

    - name: Tag EIP so we can try matching it
      amazon.aws.ec2_eip:
        state: present
        public_ip: "{{ no_tagged_eip.public_ip }}"
        tags:
          Team: Frontend

    - name: Attempt reusing an existing EIP with a tag (Match available) - check_mode
      amazon.aws.ec2_eip:
        state: present
        reuse_existing_ip_allowed: true
        tag_name: Team
      register: reallocate_eip
      check_mode: true

    - ansible.builtin.assert:
        that:
          - reallocate_eip is not changed

    - name: Attempt reusing an existing EIP with a tag (Match available)
      amazon.aws.ec2_eip:
        state: present
        reuse_existing_ip_allowed: true
        tag_name: Team
      register: reallocate_eip

    - amazon.aws.ec2_eip_info:
      register: eip_info

    - ansible.builtin.assert:
        that:
          - reallocate_eip is not changed
          - reallocate_eip.public_ip is defined and ( reallocate_eip.public_ip | ansible.utils.ipaddr )
          - reallocate_eip.allocation_id is defined and reallocate_eip.allocation_id.startswith("eipalloc-")
          - ( eip_current.addresses | length )  == ( eip_info.addresses | length )

    # ------------------------------------------------------------------------------------------
    # Reuse with tag and value - No match available
    # ------------------------------------------------------------------------------------------
    - name: Set latest EIPs list
      ansible.builtin.set_fact:
        eip_current: "{{ eip_info }}"

    - name: Attempt reusing an existing EIP with a tag and it's value (no match available) - check_mode
      amazon.aws.ec2_eip:
        state: present
        reuse_existing_ip_allowed: true
        tag_name: Team
        tag_value: Backend
      register: backend_eip
      check_mode: true

    - ansible.builtin.assert:
        that:
          - backend_eip is changed

    - name: Attempt reusing an existing EIP with a tag and it's value (no match available)
      amazon.aws.ec2_eip:
        state: present
        reuse_existing_ip_allowed: true
        tag_name: Team
        tag_value: Backend
      register: backend_eip

    - amazon.aws.ec2_eip_info:
      register: eip_info

    - ansible.builtin.assert:
        that:
          - backend_eip is changed
          - backend_eip.public_ip is defined and ( backend_eip.public_ip | ansible.utils.ipaddr )
          - backend_eip.allocation_id is defined and backend_eip.allocation_id.startswith("eipalloc-")
          - ( eip_current.addresses | length ) + 1  == ( eip_info.addresses | length )

    # ------------------------------------------------------------------------------------------
    # Reuse with tag - Match available
    # ------------------------------------------------------------------------------------------
    - name: Set latest EIPs list
      ansible.builtin.set_fact:
        eip_current: "{{ eip_info }}"

    - name: Tag EIP so we can try matching it
      amazon.aws.ec2_eip:
        state: present
        public_ip: "{{ backend_eip.public_ip }}"
        tags:
          Team: Backend

    - name: Attempt reusing an existing EIP with a tag and it's value (match available) - check_mode
      amazon.aws.ec2_eip:
        state: present
        reuse_existing_ip_allowed: true
        tag_name: Team
        tag_value: Backend
      register: reallocate_eip
      check_mode: true

    - ansible.builtin.assert:
        that:
          - reallocate_eip is not changed

    - name: Attempt reusing an existing EIP with a tag and it's value (match available)
      amazon.aws.ec2_eip:
        state: present
        reuse_existing_ip_allowed: true
        tag_name: Team
        tag_value: Backend
      register: reallocate_eip

    - amazon.aws.ec2_eip_info:
      register: eip_info

    - ansible.builtin.assert:
        that:
          - reallocate_eip is not changed
          - reallocate_eip.public_ip is defined and reallocate_eip.public_ip != ""
          - reallocate_eip.allocation_id is defined and reallocate_eip.allocation_id != ""
          - ( eip_current.addresses | length ) == ( eip_info.addresses | length )

  always:
    - name: Release backend_eip
      amazon.aws.ec2_eip:
        state: absent
        public_ip: "{{ backend_eip.public_ip }}"
      when: backend_eip is defined

    - name: Release no_tagged_eip
      amazon.aws.ec2_eip:
        state: absent
        public_ip: "{{ no_tagged_eip.public_ip }}"
      when: no_tagged_eip is defined
